package keystrokesmod.module.impl.exploit.disabler.hypixel;

import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.ReceivePacketEvent;
import keystrokesmod.event.WorldChangeEvent;
import keystrokesmod.module.ModuleManager;
import keystrokesmod.module.impl.client.Notifications;
import keystrokesmod.module.impl.exploit.disabler.HypixelDisabler;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.Utils;
import keystrokesmod.utility.render.Animation;
import keystrokesmod.utility.render.Easing;
import keystrokesmod.utility.render.RenderUtils;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.jetbrains.annotations.NotNull;

public class HypixelMotionDisabler extends SubMode<HypixelDisabler> {
    private int flagged;
    private int offGroundTicks = 0;
    private static boolean isFinished = false;
    private final Animation animation = new Animation(Easing.EASE_OUT_CIRC, 500);

    public HypixelMotionDisabler(String name, @NotNull HypixelDisabler parent) {
        super(name, parent);
    }

    public static boolean isDisabled() {
        if (!ModuleManager.disabler.isEnabled()) return false;
        if (!(ModuleManager.disabler.mode.getSelected() instanceof HypixelDisabler)) return false;
        if (!(((HypixelDisabler) ModuleManager.disabler.mode.getSelected()).motion.getSelected() instanceof HypixelMotionDisabler)) return false;
        return isFinished;
    }

    @SubscribeEvent
    public void onPreMotion(PreMotionEvent event) {
        if (isFinished) return;
        if (mc.thePlayer.onGround) {
            if (!Utils.jumpDown())
                mc.thePlayer.jump();
        } else if (offGroundTicks >= 9) {
            if (offGroundTicks % 2 == 0) {
                event.setPosX(event.getPosX() + Utils.randomizeDouble(0.09, 0.12));  // 0.095
            }

            mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0.0;
        }
    }

    @SubscribeEvent
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook && !isFinished) {
            flagged++;
            if (this.flagged == 20) {
                isFinished = true;
                flagged = 0;
                Notifications.sendNotification(Notifications.NotificationTypes.INFO, "Success to disable.");
                isFinished = true;
            }
        }
    }

    @SubscribeEvent
    public void onWorldChange(WorldChangeEvent event) {
        isFinished = false;
        this.flagged = 0;
        animation.setValue(flagged);
    }

    @Override
    public void onUpdate() {
        if (mc.thePlayer.onGround)
            offGroundTicks = 0;
        else 
            offGroundTicks++;
    }

    @Override
    public void onDisable() {
        onWorldChange(null);
    }

    @SubscribeEvent
    public void onRender(TickEvent.RenderTickEvent event) {
        if (!isFinished) {
            animation.run(flagged);
            RenderUtils.drawProgressBar(Math.min(animation.getValue() / 20.0, 1), "Disabler");
        }
    }
}
