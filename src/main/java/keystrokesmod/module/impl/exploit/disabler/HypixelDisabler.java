package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.*;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.impl.other.RotationHandler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.MoveUtil;
import keystrokesmod.utility.PacketUtils;
import keystrokesmod.utility.render.RenderUtils;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.jetbrains.annotations.NotNull;

public class HypixelDisabler extends SubMode<Disabler> {
    private final ButtonSetting test1;

    private long lastJoinWorldTime = -1;
    private boolean freeze = false;

    public HypixelDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(test1 = new ButtonSetting("Test1", false));
    }

    @Override
    public void onEnable() {
        lastJoinWorldTime = -1;
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.getPacket() instanceof C0BPacketEntityAction
                && ((C0BPacketEntityAction) event.getPacket()).getAction() == C0BPacketEntityAction.Action.OPEN_INVENTORY) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof C03PacketPlayer && test1.isToggled()) {
            if (System.currentTimeMillis() - lastJoinWorldTime > 5000) {
                freeze = false;
            } else {
                freeze = true;
                event.setCanceled(true);
            }
        }
    }

    private boolean isMove() {
        return mc.thePlayer.lastTickPosX != mc.thePlayer.posX || mc.thePlayer.motionX != 0
                || mc.thePlayer.lastTickPosY != mc.thePlayer.posY || mc.thePlayer.motionY != 0
                || mc.thePlayer.lastTickPosZ != mc.thePlayer.posZ || mc.thePlayer.motionZ != 0
                || RotationHandler.getPrevRotationYaw() != RotationHandler.getRotationYaw()
                || RotationHandler.getPrevRotationPitch() != RotationHandler.getRotationPitch();
    }

    @SubscribeEvent
    public void onEntityJoinWorld(@NotNull EntityJoinWorldEvent event) {
        if (event.entity == mc.thePlayer)
            lastJoinWorldTime = System.currentTimeMillis();
    }

    @SubscribeEvent
    public void onMove(MoveEvent event) {
        if (freeze) {
            event.setCanceled(true);
            MoveUtil.stop();
            mc.thePlayer.motionY = 0;
        }
    }

    @SubscribeEvent
    public void onRender(TickEvent.RenderTickEvent event) {
        if (freeze)
            RenderUtils.drawText(String.format("%.1fs", Math.max((5000 - System.currentTimeMillis() - lastJoinWorldTime) / 1000.0, 0)));
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onPreMotion(@NotNull PreMotionEvent event) {
        event.setSprinting(false);
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            if (mc.thePlayer.isUsingItem()) {
                if (mc.thePlayer.isBlocking()) {
                    PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));
                } else {
                    mc.playerController.onStoppedUsingItem(mc.thePlayer);
                }
            }
        }
    }
}
