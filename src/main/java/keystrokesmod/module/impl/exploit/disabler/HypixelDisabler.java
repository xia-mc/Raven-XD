package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.Raven;
import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.SendPacketEvent;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.setting.impl.DescriptionSetting;
import keystrokesmod.module.setting.impl.SliderSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;

public class HypixelDisabler extends SubMode<Disabler> {
    private final Queue<Packet<?>> delayedPackets = new ConcurrentLinkedQueue<>();
    private long lastClickWindowTime = -1;

    private final SliderSetting blinkingTime;

    public HypixelDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(new DescriptionSetting("InvMove"));
        this.registerSetting(blinkingTime = new SliderSetting("Blinking time", 250, 100, 500, 50));
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.getPacket() instanceof C0BPacketEntityAction) {
            C0BPacketEntityAction packet = (C0BPacketEntityAction) event.getPacket();
            if (packet.getAction() == C0BPacketEntityAction.Action.OPEN_INVENTORY) {
                event.setCanceled(true);
            }
        } else {
            final long time = System.currentTimeMillis();
            if (event.getPacket() instanceof C0EPacketClickWindow) {
                if (event.isCanceled()) return;
                if (time - lastClickWindowTime > (int) blinkingTime.getInput()) {
                    event.setCanceled(true);
                    Raven.getExecutor().schedule(() -> PacketUtils.sendPacketNoEvent(event.getPacket()), 50, TimeUnit.MILLISECONDS);
                }
                lastClickWindowTime = time;
            } else if (event.getPacket() instanceof C03PacketPlayer) {
                if (event.isCanceled()) return;
                if (time - lastClickWindowTime <= (int) blinkingTime.getInput()) {
                    event.setCanceled(true);
                    delayedPackets.add(event.getPacket());
                } else if (!delayedPackets.isEmpty()) {
                    reset();
                }
            }
        }
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onPreMotion(@NotNull PreMotionEvent event) {
        event.setSprinting(false);
    }

    @Override
    public void onDisable() {
        reset();
    }

    private void reset() {
        for (Packet<?> packet : delayedPackets) {
            PacketUtils.sendPacketNoEvent(packet);
        }
        delayedPackets.clear();
        lastClickWindowTime = -1;
    }
}
